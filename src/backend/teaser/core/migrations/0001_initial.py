# Generated by Django 4.1.6 on 2023-04-25 13:24

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='AuthTokenModel',
            fields=[
                ('token_hash', models.CharField(max_length=32, primary_key=True, serialize=False)),
                ('expiry_date', models.DateTimeField()),
                ('created_date', models.DateTimeField(auto_now_add=True)),
                ('is_valid', models.BooleanField(default=True)),
            ],
        ),
        migrations.CreateModel(
            name='BillingPeriodModel',
            fields=[
                ('time_range', models.CharField(help_text='Weekly, Fortnightly, Monthly, Yearly, etc..', max_length=20, primary_key=True, serialize=False)),
            ],
        ),
        migrations.CreateModel(
            name='BlockedUsersModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='BookmarkedPostsModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='CategoriesModel',
            fields=[
                ('title', models.CharField(max_length=50, primary_key=True, serialize=False)),
            ],
        ),
        migrations.CreateModel(
            name='CommentPathsModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('depth', models.PositiveIntegerField(default=0)),
            ],
        ),
        migrations.CreateModel(
            name='CommentsModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('comment_text', models.CharField(max_length=500)),
                ('likes', models.PositiveIntegerField(default=0)),
            ],
        ),
        migrations.CreateModel(
            name='EventMetricsModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('event_data', models.JSONField()),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='EventMetricsTypeModel',
            fields=[
                ('type', models.CharField(help_text='Events created by a user: Clicks, watch, swipe right, etc..', max_length=20, primary_key=True, serialize=False)),
            ],
        ),
        migrations.CreateModel(
            name='FollowedUsersModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='LikedPostsModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='LocationsModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('address', models.CharField(max_length=300)),
                ('country_code', models.CharField(max_length=3)),
                ('state', models.CharField(max_length=30)),
                ('city', models.CharField(max_length=30)),
            ],
        ),
        migrations.CreateModel(
            name='OpenaiGeneratedImagesModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('request_id', models.UUIDField(db_index=True, default=uuid.uuid4)),
                ('prompt', models.CharField(max_length=500)),
                ('url', models.URLField(max_length=500)),
                ('file_path', models.URLField(max_length=500)),
            ],
        ),
        migrations.CreateModel(
            name='PaymentMethodsModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('payment_details', models.JSONField()),
            ],
        ),
        migrations.CreateModel(
            name='PostCategoriesModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='PostsModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('video_id', models.UUIDField(blank=True, help_text='UUID used by bunny.net for categorizing videos', null=True)),
                ('description', models.CharField(max_length=200)),
                ('is_private', models.BooleanField(default=False)),
                ('has_comments', models.BooleanField(default=True)),
                ('post_type', models.IntegerField(default=0)),
                ('post_data', models.JSONField(help_text='data: {urls, categories, thumbnails, ...}, question: {question_text, voiceover_url}')),
                ('upload_url', models.URLField(default='')),
                ('status', models.IntegerField(choices=[(-1, 'Not Started'), (0, 'Queued'), (1, 'Processing'), (2, 'Encoding'), (3, 'Finished'), (4, 'Resolution Finished'), (5, 'Failed'), (6, 'Presigned Upload Started'), (7, 'Presigned Upload Finished'), (8, 'Presigned Upload Failed')], default=-1)),
            ],
        ),
        migrations.CreateModel(
            name='PostTagsModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='ProfileLinksModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('link_url', models.URLField()),
            ],
        ),
        migrations.CreateModel(
            name='ProfileLinkTypesModel',
            fields=[
                ('type', models.CharField(max_length=20, primary_key=True, serialize=False)),
            ],
        ),
        migrations.CreateModel(
            name='PurchasesModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Donations, Purchases for services', max_length=300)),
                ('purchase_date', models.DateTimeField()),
            ],
        ),
        migrations.CreateModel(
            name='ServicesModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cost', models.DecimalField(decimal_places=2, default=0, max_digits=10)),
                ('title', models.CharField(max_length=100)),
                ('description', models.CharField(max_length=500)),
            ],
        ),
        migrations.CreateModel(
            name='SongsModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=100)),
                ('song_url', models.URLField()),
                ('duration', models.IntegerField(default=0)),
                ('author', models.CharField(default='Anonymous', max_length=64)),
                ('thumbnail', models.URLField(blank=True)),
                ('original_url', models.URLField(blank=True, help_text='Original url the song was downloaded from')),
            ],
        ),
        migrations.CreateModel(
            name='TagsModel',
            fields=[
                ('name', models.CharField(max_length=50, primary_key=True, serialize=False)),
            ],
        ),
        migrations.CreateModel(
            name='TeaserUserModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nfc_username', models.CharField(max_length=32)),
                ('phone_str', models.CharField(max_length=16)),
                ('profile_photo_url', models.URLField(blank=True, default='')),
                ('stage_name', models.CharField(blank=True, default='', max_length=64)),
                ('dob_date', models.DateField()),
                ('is_verified', models.BooleanField(default=False)),
                ('terms_of_service_accepted', models.BooleanField(default=False)),
                ('location_id', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='core.locationsmodel')),
                ('user_id', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='UserProfileModel',
            fields=[
                ('user_id', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='core.teaserusermodel')),
                ('description', models.CharField(default='Add a bio', max_length=200)),
            ],
        ),
        migrations.CreateModel(
            name='UserCategoriesModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('colour_code', models.CharField(help_text='#?????? colour code identifier specified by user', max_length=7)),
                ('categories_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.categoriesmodel')),
                ('user_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.teaserusermodel')),
            ],
        ),
        migrations.CreateModel(
            name='SubscriptionsModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_subscribed', models.BooleanField(default=False)),
                ('price', models.DecimalField(decimal_places=2, max_digits=10)),
                ('billing_period', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='core.billingperiodmodel')),
                ('creator_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='creator_id', to='core.teaserusermodel')),
                ('subscriber_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='subscriber_id', to='core.teaserusermodel')),
            ],
        ),
        migrations.AddIndex(
            model_name='songsmodel',
            index=models.Index(fields=['title', 'author'], name='core_songsm_title_d0ef85_idx'),
        ),
        migrations.AddField(
            model_name='servicesmodel',
            name='user_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.teaserusermodel'),
        ),
        migrations.AddField(
            model_name='purchasesmodel',
            name='buyer_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='buyer_id', to='core.teaserusermodel'),
        ),
        migrations.AddField(
            model_name='purchasesmodel',
            name='payment_method',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='core.paymentmethodsmodel'),
        ),
        migrations.AddField(
            model_name='purchasesmodel',
            name='seller_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='seller_id', to='core.teaserusermodel'),
        ),
        migrations.AddField(
            model_name='profilelinksmodel',
            name='link_type',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='core.profilelinktypesmodel'),
        ),
        migrations.AddField(
            model_name='profilelinksmodel',
            name='user_id',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='core.teaserusermodel'),
        ),
        migrations.AddField(
            model_name='posttagsmodel',
            name='post_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.postsmodel'),
        ),
        migrations.AddField(
            model_name='posttagsmodel',
            name='tag_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.tagsmodel'),
        ),
        migrations.AddField(
            model_name='postsmodel',
            name='song_id',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='core.songsmodel'),
        ),
        migrations.AddField(
            model_name='postsmodel',
            name='user_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.teaserusermodel'),
        ),
        migrations.AddField(
            model_name='postcategoriesmodel',
            name='category_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.categoriesmodel'),
        ),
        migrations.AddField(
            model_name='postcategoriesmodel',
            name='post_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.postsmodel'),
        ),
        migrations.AddField(
            model_name='paymentmethodsmodel',
            name='user_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.teaserusermodel'),
        ),
        migrations.AddField(
            model_name='likedpostsmodel',
            name='post_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.postsmodel'),
        ),
        migrations.AddField(
            model_name='likedpostsmodel',
            name='user_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.teaserusermodel'),
        ),
        migrations.AddField(
            model_name='followedusersmodel',
            name='followed_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='followed_id', to='core.teaserusermodel'),
        ),
        migrations.AddField(
            model_name='followedusersmodel',
            name='follower_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='follower_id', to='core.teaserusermodel'),
        ),
        migrations.AddField(
            model_name='eventmetricsmodel',
            name='event_type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='core.eventmetricstypemodel'),
        ),
        migrations.AddField(
            model_name='eventmetricsmodel',
            name='user_id',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='core.teaserusermodel'),
        ),
        migrations.AddField(
            model_name='commentsmodel',
            name='post_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.postsmodel'),
        ),
        migrations.AddField(
            model_name='commentsmodel',
            name='user_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.teaserusermodel'),
        ),
        migrations.AddField(
            model_name='commentpathsmodel',
            name='ancestor',
            field=models.OneToOneField(null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='ancestor', to='core.commentsmodel'),
        ),
        migrations.AddField(
            model_name='commentpathsmodel',
            name='descendent',
            field=models.OneToOneField(null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='descendent', to='core.commentsmodel'),
        ),
        migrations.AddField(
            model_name='bookmarkedpostsmodel',
            name='post_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.postsmodel'),
        ),
        migrations.AddField(
            model_name='bookmarkedpostsmodel',
            name='user_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.teaserusermodel'),
        ),
        migrations.AddField(
            model_name='blockedusersmodel',
            name='blocked_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='blocked_id', to='core.teaserusermodel'),
        ),
        migrations.AddField(
            model_name='blockedusersmodel',
            name='blocker_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='blocker_id', to='core.teaserusermodel'),
        ),
        migrations.AddField(
            model_name='authtokenmodel',
            name='teaser_user_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.teaserusermodel'),
        ),
        migrations.AddIndex(
            model_name='usercategoriesmodel',
            index=models.Index(fields=['user_id'], name='core_userca_user_id_caf0e9_idx'),
        ),
        migrations.AddIndex(
            model_name='postsmodel',
            index=models.Index(fields=['video_id'], name='core_postsm_video_i_0a7f52_idx'),
        ),
    ]
