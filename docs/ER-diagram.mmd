    erDiagram
        TeaserUserModel |o--o{ PostsModel : uploads
        TeaserUserModel |o--o{ SERVICES : offers
        PostsModel ||--|| SongsModel : plays
        TeaserUserModel ||--|| User : is
        TeaserUserModel ||--|| LocationsModel : "located at"
        TeaserUserModel |o--o{ AuthTokenModel : "login is authorized by"
        User   {
            int id PK "django.contrib.auth user"
            string username  "6-32 characters. Unicode nfkc normalized."
            string password "encrypted, 8-32 characters with a at least one Uppercase, lowercase, number and special chacter"
        }
        TeaserUserModel {
            int id PK
            int user_id FK "One to one"
            int location_id FK "on_delete=models.DO_NOTHING, null=True, blank=True"
            string nfc_username "6-32 characters. Unicode nfc normalized."
            string phone_str "+XX Country code included."
            string profile_photo_url "default=http://teasernsfw.b-cdn.net/teaser-32x32.png, blank=True"
            string stage_name "max_length=64, default=, blank=True"
            date dob_date ">= 18 years old, utc"
            boolean is_verified "default=False"
            boolean terms_of_service_accepted "default=False"
            datetime created_at "Added automatically. auto_now_add=True, blank=True"
        }
        LocationsModel  {
            int id PK
            string address "max_length=300"
            string country_code "max_length=3"
            string state "max_length=30"
            string city "max_length=30"
        }
        AuthTokenModel  {
            string token_hash PK "max_length=32"
            int teaser_user_id FK "TeaserUserModel"
            datetime expiry_date "3 months after creation"
            datetime created_date "Added automatically. auto_now_add=True, blank=True"
            boolean is_valid "Invalidated by logout. default=True"
        }

        PostsModel {
            int id PK
            int user_id FK "TeaserUserModel"
            int song_id FK "SongsModel"

            enum PostStatuses "integer choice -1 to 8"
            enum PostTypes "integer choice 0, 1"
            enum VideoModes "integer choice PORTRAIT=0, LANDSCAPE=1"

            uuid video_id "blank=True, null=True"
            string description "max_length=200"
            string upload_url "default=empty string"
            string video_url "default=empty string"
            string thumbnail_url "default=empty string"

            boolean is_pinned "default=False"
            boolean is_private "default=False"
            boolean is_nsfw "default=True"
            boolean has_comments "default=True"
            string nfc_username "Denormalized nfc_username from TeaserUserModel"

            datetime created_at "Added automatically. auto_now_add=True, blank=True"
            string reddit_id "To be deprecated. max_length=8, blank=True, null=True"
            int n_likes "Denormalized count of LikedPosts. >0. default=0"
            int n_bookmarks "Denormalized count of BookmarkedPosts. >0. default=0"
            int n_shares "Denormalized count of SharedPosts. >0. default=0"
            int n_comments "Denormalized count of Comments on a post. >0. default=0"

            int video_mode "1:1 enum VideoModes"
            int post_type "1:1 enum PostTypes"
            int status "1:1 enum PostStatuses"

            JSONB post_data "data: {urls, thumbnail, ..}, question: {data, VO_url}"
            index indices "[status], [video_id], [description], [is_nsfw], GinIndex([description, nfc_username, post_category])"
            ordering status "Order by status"
        }

        PostCategoriesModel }o--o{ PostsModel : "relates categories to"
        PostCategoriesModel }o--o{ CategoriesModel : "relates posts to"
        PostCategoriesModel {
            int post_id FK "PostsModel"
            int category_id FK "CategoriesModel"
        }
        SongsModel   {
            int id PK
            string title "max_length=100"
            string song_url
            int duration "duration in ms. default=0"
            string author "default=Anonymous, max_length=64"
            string thumbnail "blank=True"
            string original_url "URL downloaded from if youtube url"
            url song_url "nullable"
            index indices "[title, author]"
        }
        SERVICES  {
            int id PK
            int user_id FK
            float cost "AUD, 2 decimal points"
            string title
            string description
        }
        USER_LOCATIONS }|--o{ LOCATIONS : located
        USER_LOCATIONS }|--o{ TeaserUserModel : located
        USER_LOCATIONS  {
            int user_id "PK FK"
            int location_id "PK FK"
            date last_seen
        }
        LOCATIONS    {
            int id PK
            string address "nullable"
            string city
            string state
            string country
        }

        LIKED_POSTS }o--|| TeaserUserModel : has
        LIKED_POSTS }o--|| PostsModel : has
        LIKED_POSTS  {
            int post_id FK
            int user_id FK
        }

        BOOKMARKED_POSTS }o--|| TeaserUserModel : has
        BOOKMARKED_POSTS }o--|| PostsModel : has
        BOOKMARKED_POSTS {
            int post_id FK
            int user_id FK
        }
        USER_CATEGORIES ||--o{ CategoriesModel : "applies to"
        USER_CATEGORIES }|--o{ TeaserUserModel : "applies to"
        CategoriesModel  {
            string title PK "max_length=50"
            string alias "max_length=50"
        }
        USER_CATEGORIES {
            int user_id FK
            int category_id FK
            string colour "#colour code identifier specified by user"
        }
        USER_PROFILE  {
            int user_id "PK FK"
            string description
        }
        USER_PROFILE ||--|| TeaserUserModel : has
        USER_PROFILE ||--o{ PROFILE_LINKS : has
        PROFILE_LINKS }|--|{ PROFILE_LINK_TYPES : are
        PROFILE_LINKS   {
            int id PK
            int user_id FK
            string link_type FK
            string link_url
        }
        PROFILE_LINK_TYPES   {
            string type PK
        }


        PostTagsModel |o--|{ PostsModel : has
        PostTagsModel |o--|{ TagsModel : has
        TagsModel  {
            string name PK "max_length=50, primary_key=True"
        }
        PostTagsModel {
            int post_id FK
            int tag_id FK
        }

        FOLLOWED_USERS }o--|{ TeaserUserModel : follows
        BLOCKED_USERS }o--|| TeaserUserModel : blocks
        FOLLOWED_USERS {
            int followed_user_id FK
            int follower_user_id FK
        }
        BLOCKED_USERS {
            int blocked_user_id FK
            int blocker_user_id FK
        }

        COMMENT_PATHS }o--|{ PostsModel : "closure table"
        COMMENT_PATHS }o--|{ COMMENTS : "closure table"

        COMMENTS    {
            int id PK
            int post_id FK
            int user_id FK
            string comment_text
            int likes
        }
        COMMENT_PATHS   {
            int ancestor "PK FK"
            int descendent "PK FK"
            int depth ">= 0"
        }

        SUBSCRIPTIONS }o--|{ TeaserUserModel : has
        SUBSCRIPTIONS }|--|| BILLING_PERIOD : has
        SUBSCRIPTIONS   {
            int creator_id "PK FK"
            int subscriber_id "PK FK"
            boolean is_subscribed
            double price
            string billing_period "FK recurrent period of billing"
        }

        BILLING_PERIOD   {
            string time_range "PK --> Weekly, Fortnightly, Monthly, Yearly"
        }

        TeaserUserModel }o--o| PURCHASES : makes
        TeaserUserModel ||--o{ PAYMENT_METHODS : has
        PURCHASES }|--|| PAYMENT_METHODS : uses
        PURCHASES   {
            int id PK
            int seller_id FK
            int buyer_id FK
            string name "Donation, Purchase for services"
            date timestamp
            int payment_method FK
        }

        PAYMENT_METHODS {
            int id PK
            int user_id FK
            JSONB details "encrypted details?"
        }

        EVENT_METRICS }o--|| TeaserUserModel : event
        EVENT_METRICS }|--|| EVENT_METRIC_TYPES : has
        EVENT_METRICS {
            int id PK
            int user_id FK
            string event_type FK
            JSONB data "Data describing the event"
        }

        EVENT_METRIC_TYPES {
            string type "PK clicks, watch, swipe right, etc."
        }
