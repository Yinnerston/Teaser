"use strict";(self.webpackChunkteaser=self.webpackChunkteaser||[]).push([[3159],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>M});var o=t(7294);function s(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function d(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){s(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,o,s=function(e,n){if(null==e)return{};var t,o,s={},r=Object.keys(e);for(o=0;o<r.length;o++)t=r[o],n.indexOf(t)>=0||(s[t]=e[t]);return s}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)t=r[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(s[t]=e[t])}return s}var a=o.createContext({}),l=function(e){var n=o.useContext(a),t=n;return e&&(t="function"==typeof e?e(n):d(d({},n),e)),t},u=function(e){var n=l(e.components);return o.createElement(a.Provider,{value:n},e.children)},c="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},_=o.forwardRef((function(e,n){var t=e.components,s=e.mdxType,r=e.originalType,a=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),c=l(t),_=s,M=c["".concat(a,".").concat(_)]||c[_]||m[_]||r;return t?o.createElement(M,d(d({ref:n},u),{},{components:t})):o.createElement(M,d({ref:n},u))}));function M(e,n){var t=arguments,s=n&&n.mdxType;if("string"==typeof e||s){var r=t.length,d=new Array(r);d[0]=_;var i={};for(var a in n)hasOwnProperty.call(n,a)&&(i[a]=n[a]);i.originalType=e,i[c]="string"==typeof e?e:s,d[1]=i;for(var l=2;l<r;l++)d[l]=t[l];return o.createElement.apply(null,d)}return o.createElement.apply(null,t)}_.displayName="MDXCreateElement"},6953:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>d,default:()=>m,frontMatter:()=>r,metadata:()=>i,toc:()=>l});var o=t(7462),s=(t(7294),t(3905));const r={sidebar_position:4,sidebar_label:"Data Model"},d="Data Model",i={unversionedId:"getting-started/data_model",id:"getting-started/data_model",title:"Data Model",description:"Open the SVG in a new tab to enlarge it.",source:"@site/docs/getting-started/04_data_model.md",sourceDirName:"getting-started",slug:"/getting-started/data_model",permalink:"/Teaser/docs/getting-started/data_model",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/getting-started/04_data_model.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4,sidebar_label:"Data Model"},sidebar:"tutorialSidebar",previous:{title:"Architecture Diagram",permalink:"/Teaser/docs/getting-started/architecture_diagram"},next:{title:"Tutorials",permalink:"/Teaser/docs/category/tutorials"}},a={},l=[],u={toc:l},c="wrapper";function m(e){let{components:n,...r}=e;return(0,s.kt)(c,(0,o.Z)({},u,r,{components:n,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"data-model"},"Data Model"),(0,s.kt)("p",null,"Open the SVG in a new tab to enlarge it.\n",(0,s.kt)("img",{alt:"SVG Data Model",src:t(1793).Z,width:"7820",height:"2055"})),(0,s.kt)("p",null,"As mermaid inline:"),(0,s.kt)("mermaid",{value:'    erDiagram\n        TeaserUserModel |o--o{ PostsModel : uploads\n        TeaserUserModel |o--o{ ServicesModel : offers\n        PostsModel ||--|| SongsModel : plays\n        TeaserUserModel ||--|| User : is\n        TeaserUserModel ||--|| LocationsModel : "located at"\n        TeaserUserModel |o--o{ AuthTokenModel : "login is authorized by"\n        User   {\n            int id PK "django.contrib.auth user"\n            string username  "6-32 characters. Unicode nfkc normalized."\n            string password "encrypted, 8-32 characters with a at least one Uppercase, lowercase, number and special chacter"\n        }\n        TeaserUserModel {\n            int id PK\n            int user_id FK "One to one"\n            int location_id FK "on_delete=models.DO_NOTHING, null=True, blank=True"\n            string nfc_username "6-32 characters. Unicode nfc normalized."\n            string phone_str "+XX Country code included."\n            string profile_photo_url "default=http://teasernsfw.b-cdn.net/teaser-32x32.png, blank=True"\n            string stage_name "max_length=64, default=, blank=True"\n            date dob_date ">= 18 years old, utc"\n            boolean is_verified "default=False"\n            boolean terms_of_service_accepted "default=False"\n            datetime created_at "Added automatically. auto_now_add=True, blank=True"\n        }\n        LocationsModel  {\n            int id PK\n            string address "max_length=300"\n            string country_code "max_length=3"\n            string state "max_length=30"\n            string city "max_length=30"\n        }\n        AuthTokenModel  {\n            string token_hash PK "max_length=32"\n            int teaser_user_id FK "TeaserUserModel"\n            datetime expiry_date "3 months after creation"\n            datetime created_date "Added automatically. auto_now_add=True, blank=True"\n            boolean is_valid "Invalidated by logout. default=True"\n        }\n\n        PostsModel {\n            int id PK\n            int user_id FK "TeaserUserModel"\n            int song_id FK "SongsModel"\n\n            enum PostStatuses "integer choice -1 to 8"\n            enum PostTypes "integer choice 0, 1"\n            enum VideoModes "integer choice PORTRAIT=0, LANDSCAPE=1"\n\n            uuid video_id "blank=True, null=True"\n            string description "max_length=200"\n            string upload_url "default=empty string"\n            string video_url "default=empty string"\n            string thumbnail_url "default=empty string"\n\n            boolean is_pinned "default=False"\n            boolean is_private "default=False"\n            boolean is_nsfw "default=True"\n            boolean has_comments "default=True"\n            string nfc_username "Denormalized nfc_username from TeaserUserModel"\n\n            datetime created_at "Added automatically. auto_now_add=True, blank=True"\n            string reddit_id "To be deprecated. max_length=8, blank=True, null=True"\n            int n_likes "Denormalized count of LikedPosts. >0. default=0"\n            int n_bookmarks "Denormalized count of BookmarkedPosts. >0. default=0"\n            int n_shares "Denormalized count of SharedPosts. >0. default=0"\n            int n_comments "Denormalized count of Comments on a post. >0. default=0"\n\n            int video_mode "1:1 enum VideoModes"\n            int post_type "1:1 enum PostTypes"\n            int status "1:1 enum PostStatuses"\n\n            JSONB post_data "data: {urls, thumbnail, ..}, question: {data, VO_url}"\n            index indices "[status], [video_id], [description], [is_nsfw], GinIndex([description, nfc_username, post_category])"\n            ordering order "Order by status"\n        }\n\n        PostCategoriesModel }o--o{ PostsModel : "relates categories to"\n        PostCategoriesModel }o--o{ CategoriesModel : "relates posts to"\n        PostCategoriesModel {\n            int post_id FK "PostsModel"\n            int category_id FK "CategoriesModel"\n        }\n        SongsModel   {\n            int id PK\n            string title "max_length=100"\n            string song_url\n            int duration "duration in ms. default=0"\n            string author "default=Anonymous, max_length=64"\n            string thumbnail "blank=True"\n            string original_url "URL downloaded from if youtube url"\n            url song_url "nullable"\n            index indices "[title, author]"\n        }\n        ServicesModel  {\n            int id PK "Not implemented yet."\n            int user_id FK\n            float cost "AUD, 2 decimal points"\n            string title "max_length=100"\n            string description "max_length=500"\n        }\n\n        LikedPostsModel }o--|| TeaserUserModel : has\n        LikedPostsModel }o--|| PostsModel : has\n        LikedPostsModel  {\n            int post_id FK "PostsModel"\n            int user_id FK "TeaserUserModel"\n            boolean is_liked "default=True"\n            boolean updated_at "Added automatically. auto_now_add=True, blank=True"\n            constraint unique_together "[user_id, post_id]"\n            index indices "[user_id, post_id, is_liked]"\n        }\n\n        BookmarkedPostsModel }o--|| TeaserUserModel : has\n        BookmarkedPostsModel }o--|| PostsModel : has\n        BookmarkedPostsModel {\n            int post_id FK "PostsModel"\n            int user_id FK "TeaserUserModel"\n            boolean is_bookmarked "default=True"\n            boolean updated_at "Added automatically. auto_now_add=True, blank=True"\n            constraint unique_together "[user_id, post_id]"\n            index indices "[user_id, post_id, is_liked]"\n        }\n        SharedPostsModel }o--|| TeaserUserModel : has\n        SharedPostsModel }o--|| PostsModel : has\n\n        SharedPostsModel    {\n            int post_id FK "PostsModel"\n            int user_id FK "TeaserUserModel"\n            integer n_shares "Currently not implemented. default=0."\n            boolean updated_at "Added automatically. auto_now_add=True, blank=True"\n            constraint unique_together "[user_id, post_id]"\n            index indices "[user_id, post_id]"\n        }\n\n        UserPostActivitiesModel |o--|| TeaserUserModel : has\n        UserPostActivitiesModel |o--|| PostsModel : has\n        UserPostActivitiesModel |o--|| LikedPostsModel : "denormalises count()"\n        UserPostActivitiesModel |o--|| BookmarkedPostsModel : "denormalises count()"\n        UserPostActivitiesModel |o--|| SharedPostsModel : "denormalises count()"\n        UserPostActivitiesModel {\n            int id PK "Denormalized table aggregating counts"\n            int user_id FK "TeaserUserModel"\n            int post_id FK "PostsModel"\n            int liked_post FK "LikedPostsModel"\n            int bookmarked_post FK "BookmarkedPostsModel"\n            int shared_post FK "SharedPostsModel"\n            constraint unique_together "[user_id, post_id]"\n            index indices "[user_id, post_id]"\n        }\n\n        UserCategoriesModel ||--o{ CategoriesModel : "applies to"\n        UserCategoriesModel }|--o{ TeaserUserModel : "applies to"\n        CategoriesModel  {\n            string title PK "max_length=50"\n            string alias "max_length=50"\n        }\n        UserCategoriesModel {\n            int user_id FK  "TeaserUserModel"\n            int category_id FK "CategoriesModel"\n            string colour_code "max_length=7. #colour code identifier specified by user"\n            index indices "[user_id]"\n        }\n        UserProfileModel  {\n            int user_id "PK FK"\n            string description "max_length=200, default=Add a bio"\n        }\n        UserProfileModel ||--|| TeaserUserModel : has\n        UserProfileModel ||--o{ ProfileLinksModel : has\n        ProfileLinksModel }|--|{ ProfileLinkTypesModel : are\n        ProfileLinksModel   {\n            int id PK   "Currently not implemented"\n            int user_id FK  "1:1 TeaserUserModel"\n            string link_type FK "1:1 ProfileLinkTypesModel"\n            string link_url\n        }\n        ProfileLinkTypesModel   {\n            string type PK\n        }\n\n\n        PostTagsModel |o--|{ PostsModel : has\n        PostTagsModel |o--|{ TagsModel : has\n        TagsModel  {\n            string name PK "max_length=50, primary_key=True"\n        }\n        PostTagsModel {\n            int post_id FK\n            int tag_id FK\n        }\n\n        FollowedUsersModel }o--|{ TeaserUserModel : follows\n        BlockedUsersModel }o--|| TeaserUserModel : blocks\n        FollowedUsersModel {\n            int followed_user_id FK "TeaserUserModel"\n            int follower_user_id FK "TeaserUserModel"\n        }\n        BlockedUsersModel {\n            int blocked_user_id FK "TeaserUserModel"\n            int blocker_user_id FK "TeaserUserModel"\n        }\n\n        CommentPathsModel }o--|{ PostsModel : "closure table"\n        CommentPathsModel }o--|{ CommentsModel : "closure table"\n        CommentsModel }o--|{ TeaserUserModel : comments\n        CommentsModel }o--|{ PostsModel : has\n        LikedCommentsModel }o--|{ CommentsModel : has\n        LikedCommentsModel }o--|{ TeaserUserModel : "comment by"\n\n        CommentsModel    {\n            int id PK\n            int post_id FK "PostsModel"\n            int user_id FK "TeaserUserModel"\n            string comment_text "max_length=500"\n            int n_likes "default=0. >=0. Denormalized count() on LikedCommentsModel"\n            datetime created_at "Added automatically. auto_now_add=True, blank=True"\n            datetime updated_at "Added automatically. auto_now_add=True, blank=True"\n            boolean has_replies "default=False. Denormalized count() > 0 on descendents in CommentPathsModel"\n            int depth "default=0. >=0."\n        }\n        CommentPathsModel   {\n            int id PK\n            int post_id "PostsModel"\n            int ancestor FK "CommentsModel"\n            int descendent FK "CommentsModel"\n            int depth ">= 0"\n            ordering order "Order by [post_id, ancestor]"\n            constraint unique_together "[post_id, ancestor, descendent]"\n            index indices "[post_id, ancestor, descendent]"\n        }\n        LikedCommentsModel  {\n            int id PK\n            int user_id FK "TeaserUserModel"\n            int comment_id FK "CommentsModel"\n            boolean is_liked "default=True"\n            datetime updated_at "Added automatically. auto_now_add=True, blank=True"\n            constraint unique_together "[user_id, comment_id]"\n            index indices "[user_id, comment_id, is_liked]"\n        }\n        SubscriptionsModel }o--|{ TeaserUserModel : has\n        SubscriptionsModel }|--|| BillingPeriodModel : has\n        SubscriptionsModel   {\n            int creator_id FK "TeaserUserModel"\n            int subscriber_id FK "TeaserUserModel"\n            int billing_period FK "BillingPeriodModel. TODO: Should be an enum?"\n            boolean is_subscribed "default=False"\n            double price "decimal_places=2, max_digits=10"\n        }\n\n        BillingPeriodModel   {\n            string time_range PK "max_length=20, primary_key=True. Weekly, Fortnightly, Monthly, Yearly"\n        }\n\n        TeaserUserModel }o--o| PurchasesModel : makes\n        TeaserUserModel ||--o{ PaymentMethodsModel : has\n        PurchasesModel }|--|| PaymentMethodsModel : uses\n        PurchasesModel   {\n            int id PK\n            int seller_id FK "TeaserUserModel"\n            int buyer_id FK "TeaserUserModel"\n            int payment_method FK "PaymentMethodsModel"\n            string name "max_length=300. Donation, Purchase for services"\n            date purchase_date\n        }\n\n        PaymentMethodsModel {\n            int id PK\n            int user_id FK\n            JSONB details "encrypted details?"\n        }\n\n        EventMetricsModel }o--|| TeaserUserModel : event\n        EventMetricsModel {\n            int id PK\n            enum EventMetricTypes "integer choice 0 to 8"\n            int user_id FK "TeaserUserModel"\n            int event_type "1:1 enum EventMetricTypes"\n            JSONB data "Data describing the event"\n            datetime timestamp "Added automatically. auto_now_add=True, blank=True"\n            ordering order "Order by [event_type, -timestamp]"\n            index indices "[event_type, timestamp]"\n        }\n\n        PostReportsModel }o--|{ PostsModel : reports\n        PostReportsModel    {\n            int id PK\n            int post_id FK "PostsModel"\n            datetime created_at "Added automatically. auto_now_add=True, blank=True"\n        }\n        CommentReportsModel }o--|{ CommentsModel : reports\n        CommentReportsModel    {\n            int id PK\n            int comment_id FK "CommentsModel"\n            datetime created_at "Added automatically. auto_now_add=True, blank=True"\n        }\n'}))}m.isMDXComponent=!0},1793:(e,n,t)=>{t.d(n,{Z:()=>o});const o=t.p+"assets/images/er-data-model-3123c17d649ac64ff1fd4090a0988a0d.svg"}}]);